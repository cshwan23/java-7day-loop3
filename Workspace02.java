package com.naver.erp;

public class Workspace02 {

	public static void main(String[] args) {
	
//***************************************************
// 국,영,수 점수 중 높은 점수의 과목 순으로 출력하면?	(어렵다 연습하자)
//***************************************************
// 1. 순서를 바꾸기 위한 해당 과목의 또 다른 변수를 만들고 작업하자.
// 2. 막 바꿀수 있는 변수.
// 3. num1에 가장 큰 점수를 집어넣자. num2에 그 num1에 점수를 넣자.
// 4. 점수끼리의 높은 점수로 바꿨으면 과목도 바꿔줘야 한다.
// 5. 제일 높은 점수의 과목 순서대로 정렬해야한다.
// 6. 점수끼리는 비교하되 과목이름도 바꿔 줘야한다. **
// 7. 결론은 점수를 먼저 계산한 다음 과목을 맞춰서 넣어주면 된다.

			
// <1> 두 변수의 데이터를 자리 바꾸는 방법
// 빈그릇을 만들자 비교할때 잠깐만 사용할거다.
// 잠깐 쓰고 버리는 변수의 이름은 뭘로 지어줄까?
// 임시적,일시적 = temporary = temp = tmp 관용적인 표현이다.(변수명)	
		
//ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
// int형 변수 kor, eng, mat 선언하고 정수 데이터 저장하기
// 즉 국어, 영어, 수학 점수를 저장할 변수 선언하고 점수 저장하기
// 실제로 점수는 외부에서 들어오는 미지의 데이터라고 생각하자
//ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
	int kor = 94, eng = 98, mat = 90;
	
//ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
// int형 변수 num1, num2, num3 선언하고 kor, emg, mat 변수안의 데이터 저장하기
// 국어, 영어, 수학 점수를 교환할 목적으로 만든 변수 3개이다
//ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
	int num1 = kor, num2 = eng, num3 = mat; 
	
//ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
// String형 변수 sub1, sub2, sub3 선언하고 "국어","영어", "수학" 데이터 저장하기
// num1, num2, num3 변수 안의 데이터 교환될 때 과목명이 저장된
// sub1, sub2, sub3 변수 안의 데이터도 동시에 교환되야한다
//ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
	String sub1 = "국어", sub2 = "영어", sub3 = "수학";
			

	//ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
	// int형 변수 tmp 선언하고 0 저장하기
	// tmp 변수에는 num1, num2, num3 변수 안의 데이터 교환될 때 임시로 사용할 변수이다
	// 임시로 잠깐 사용할 변수명은 temp 또는 tmp라고 준다
	//ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ	
	int tmp = 0; // 점수를 담을 그릇
	
	//ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
	// String형 변수 tmp_sub 선언하고 "" 저장하기
	// tmp_sub 변수에는 sub1, sub2, sub3 변수 안의 데이터 교환될 때 임시로 사용할 변수이다
	//ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
	String tmp_sub = ""; // 과목명을 담을 그릇
	
	//ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
	// num2변수 안의 데이터가 num1변수 안의 데이터보다 크면 
	//ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
	if (num1<num2) {
		
		tmp = num1; // tmp에 num1에 있는 데이터를 저장하자.	
		num1 = num2; // num2에 있는 데이터를 num1에 옮겨넣자.
		num2 = tmp; // num1을 집어넣었던 tmp의 데이터를 num2에 집어넣자.
		
		tmp_sub = sub1; // 점수를 변경하듯 과목도 똑같이 그릇을 만들고 변경해다.
		sub1 = sub2;
		sub2 = tmp_sub;
		
	}
	//ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
	// num3변수 안의 데이터가 num1변수 안의 데이터보다 크면 
	//ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
	if (num1<num3) {
		
		tmp = num1;
		num1 = num3;
		num3 = tmp;
		
		tmp_sub = sub1;
		sub1 = sub3;
		sub3 = tmp_sub;
	}
	//ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
	// num3변수 안의 데이터가 num12변수 안의 데이터보다 크면 
	//ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
	if (num2<num3) {
		
		tmp = num2;
		num2 = num3;
		num3 = tmp;
		
		tmp_sub = sub2;
		sub2 = sub3;
		sub3 = tmp_sub;
	}
	
	System.out.println(num1 + " , " + num2 + " , " + num3); 
	System.out.println(sub1 + " , " + sub2 + " , " + sub3); 

			
//<엄청나게 많은 데이터들이 들어 오는데 순식간에 변수를 만드는 방법>
//[단 한줄의 코드로 1000개의 변수를 만드는 방법]
	
	//배열 * []
	
int[] num = new int[3000];

num[0] = 99;
// 배열의 치명적인 단점
// 저장된는 데이터의 개수를 알아야 사용가능하다
// 들어올 데이터의 개수를 알면 편하다.
// 외부에서 내부로 데이터가 300000개가 더들어오면 

// 외부(클라이언트끼리 주고받은 데이터/데이터베이스에서 오는)에서 들어오더라도 들어올 데이터의 갯수를 몰라도
// 들어올 데이터의 개수를 모를 때가 훨씬 많기 때문에 웹프로그래밍에서는 배열은 거의 안쓴다. ( -> 대신 컬렉션)

// 컬렉션(Collection)

//ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
// 다량의 데이터를 관리하는 방법론에 대해 설명하시오 (배열과컬렉션의 차이/컬렉션의 장점이 뭐죠? 라고 물어볼 수 있다)
// 1. 배열을 이용한다. 다량의 데이터의 개수를 알 경우 사용한다.
// 2. 컬렉션을 이용한다. 다량의 데이터의 개수를 모를 경우 사용한다.
//ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ



	
	
	
	
	
	}

}
